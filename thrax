#!/bin/bash
VERSION="0.72/alpha"

if [[ -z "$THRAX" ]]
then
    THRAX=`dirname $0`
fi

version () {
    cat <<END_VERSION
Thrax grammar extractor $VERSION
Copyright (C) 2010 Jonny Weese <jonny@cs.jhu.edu>
MIT License: <http://www.opensource.org/licenses/mit-license.php>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
END_VERSION
}

usage () {
    cat <<END_USAGE
Usage: `basename $0` [options] <configuration file>
Options:
  -d, --debug                       enable debugging output
  -h, --help                        print this help message and exit
  -H, --hadoop                      use Hadoop for extraction
  -m AMOUNT, --mem AMOUNT:          maximum memory for Java VM 
  -q, --quiet                       suppress all output except rules
  -v, --verbose                     enable verbose output
  -V, --version                     print version information and exit
END_USAGE
}

jvm () {
    JVM_OPTS="-Dfile.encoding=utf8"
    if [[ -f $THRAX/bin/thrax.jar ]]
    then
        java -Xmx${mem} $JVM_OPTS -jar $THRAX/bin/thrax.jar $config $verbosity
    else
        java -Xmx${mem} $JVM_OPTS -cp $THRAX/bin edu.jhu.thrax.Thrax $config $verbosity
    fi
}

hadoop () {
    if [[ -z "$HADOOP" ]]
    then
        echo "please set the $$HADOOP environment variable to point to your hadoop installation."
        exit 1
    fi
    if [[ -z "$HADOOP_VERSION" ]]
    then
        echo "please set the $$HADOOP_VERSION environment variable to your hadoop version number."
        exit 1
    fi
    ./lib/getoption.pl $config features | grep -q lex
    if [[ $? == 0 ]]
    then
        echo "lexical probability feature"
        # do the lexprob-dependent hadoop job here
        # hadoop fs merge etc etc
    fi
    # then we will run a bunch of hadoop jobs to do the extraction
}

while [[ -n "$@" ]]
do
    case $1 in
        -V|--version)
            version
            exit 0
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -m|--mem)
            mem=$2
            shift
            ;;
        -v|--verbose)
            verbosity="verbose"
            ;;
        -d|--debug)
            verbosity="debug"
            ;;
        -q|--quiet)
            verbosity="quiet"
            ;;
        -H|--hadoop)
            hadoop="yes"
            ;;
        *)
            if [[ -z "$config" ]]
            then
                config=$1
            fi
    esac
    shift
done

if [[ -z "$config" ]]
then
    usage
    exit 0
fi

if [[ -z "$mem" ]]
then
    mem="1g"
fi

if [[ -z "$hadoop" ]]
then
    jvm
else
    hadoop
fi

